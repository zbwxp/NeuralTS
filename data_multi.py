from sklearn.datasets import fetch_openml
from sklearn.utils import shuffle
from sklearn.preprocessing import OrdinalEncoder
from sklearn.preprocessing import normalize
import numpy as np


class Bandit_multi:
    def __init__(self, name, is_shuffle=True, seed=None, custom=None):
        # Fetch data
        if name == 'mnist':
            X, y = fetch_openml('mnist_784', version=1, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'mushroom':
            X, y = fetch_openml('mushroom', version=1, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'adult':
            X, y = fetch_openml('adult', version=2, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'covertype':
            X, y = fetch_openml('covertype', version=3, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'isolet':
            X, y = fetch_openml('isolet', version=1, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'letter':
            X, y = fetch_openml('letter', version=1, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'MagicTelescope':
            X, y = fetch_openml('MagicTelescope', version=1, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'shuttle':
            X, y = fetch_openml('shuttle', version=1, return_X_y=True)
            # avoid nan, set nan as -1
            X[np.isnan(X)] = - 1
            X = normalize(X)
        elif name == 'wild_arena': # rewrite this later
            with np.load(custom['X_path'], allow_pickle=True) as data:
                scores = data['scores']
                failed_index = data['all_fall_index']
            with np.load(custom['y_path'], allow_pickle=True) as data:
                embeddings = data['embeddings']

            true_index = np.array([i for i in range(len(scores)) if i not in failed_index])
            scores = scores[true_index]
            embeddings = embeddings[true_index]
            X = (embeddings - np.mean(embeddings, axis=1, keepdims=True)) / (np.std(embeddings, axis=1, keepdims=True) + 1e-8)
            y = np.mean(scores, axis=1)
            print(X.shape, y.shape)
            # price = [5, 10, 20, 5, 3, 2, 1.8]  # gold policy
            # price = [1, 2, 4.5, 0.9, .75, .8, .5]
            # y /= price
            print()



            y[:, 1] -= 0.06

            # keep_index = [1591, 111, 2961, 857, 3689, 2250, 2072, 3034, 643, 785, 700, 2916, 1562, 1625, 3372, 2648, 1025, 2061, 3602, 2259, 1284, 2076, 1183, 2054, 738, 816, 3738, 2130, 2183, 297, 782, 843, 2367, 2885, 179, 2998, 608, 1430, 650, 3408, 3108, 811, 423, 56, 1136, 1037, 1169, 3164, 1683, 2579, 1073, 25, 2590, 3030, 3226, 3366, 866, 3922, 3651, 2295, 1127, 3700, 3012, 2100, 2245, 1850, 933, 3772, 3014, 1501, 1099, 95, 421, 950, 120, 1526, 1462, 2805, 1067, 1010, 1607, 2676, 2876, 630, 2507, 724, 2758, 761, 3099, 2473, 1874, 3918, 3656, 3406, 2620, 2309, 2609, 2921, 3879, 1309, 454, 734, 167, 1388, 12, 3458, 450, 1324, 4023, 2020, 1217, 1095, 3971, 342, 1553, 3917, 3550, 283, 1828, 642, 464, 1042, 2930, 1180, 513, 145, 2200, 158, 2368, 1715, 2170, 3130, 715, 2670, 2637, 1301, 3937, 2619, 1781, 304, 3326, 1291, 1986, 917, 841, 295, 472, 3817, 987, 3624, 1396, 1916, 555, 1878, 426, 1739, 1055, 2689, 401, 3112, 3425, 3658, 3736, 1093, 1363, 3671, 2693, 3001, 1882, 3272, 1053, 1694, 3636, 3504, 1628, 823, 1529, 1340, 2414, 368, 1201, 506, 3155, 2284, 3481, 684, 996, 2406, 3498, 2234, 2, 560, 3322, 180, 1113, 1556, 2864, 3397, 1887, 284, 3031, 795, 232, 1520, 3591, 2673, 1240, 1119, 3670, 889, 2873, 1641, 1269, 1482, 1844, 290, 1031, 632, 4020, 790, 2577, 469, 2827, 2290, 1071, 3009, 2636, 2113, 2479, 3647, 2585, 2927, 3067, 3153, 3148, 3891, 2392, 2955, 3649, 261, 1693, 2457, 1589, 197, 498, 2607, 3244, 3805, 2089, 570, 1266, 2910, 3594, 1671, 3852, 1374, 22, 587, 2275, 1304, 678, 919, 2138, 2500, 2039, 1825, 3523, 2948, 2193, 2929, 3992, 1060, 3827, 4025, 3500, 2239, 2163, 2566, 3958, 3588, 813, 286, 3869, 3176, 240, 153, 2857, 3105, 1646, 3444, 3799, 451, 40, 3447, 856, 2468, 3359, 1365, 3400, 479, 3187, 1622, 3117, 2600, 77, 3046, 2649, 2509, 2391, 2430, 3739, 3704, 3694, 417, 82, 1172, 2497, 1475, 862, 3179, 2441, 1680, 1219, 2480, 1329, 1870, 1983, 930, 1688, 2242, 3763, 1112, 3765, 3781, 39, 1135, 3779, 2185, 42, 2103, 1860, 89, 1088, 3616, 453, 2269, 1064, 1572, 3433, 3778, 2787, 310, 689, 691, 9, 3899, 1427, 3915, 1252, 3223, 2136, 3981, 3052, 4027, 2806, 2326, 2248, 3152, 2313, 493, 483, 1414, 2938, 1167, 3300, 1251, 2435, 1199, 351, 1034, 873, 3353, 2119, 2463, 1623, 3445, 3194, 847, 1359, 354, 1863, 2695, 938, 1869, 2655, 3340, 3017, 2618, 221, 3652, 1506, 2629, 2411, 1627, 3914, 163, 428, 65, 903, 457, 2335, 2167, 699, 1991, 810, 3783, 3111, 227, 1097, 3684, 1002, 3803, 3731, 465, 458, 336, 340, 178, 248, 230, 2737, 1039, 1754, 303, 666, 1145, 402, 2308, 2953, 1706, 2797, 598, 599, 2291, 3835, 981, 2652, 859, 1152, 279, 1601, 3089, 1232, 2968, 3557, 3580, 53, 3135, 488, 3653, 393, 927, 3459, 2651, 1505, 3526, 19, 3191, 2973, 2547, 3309, 3371, 953, 474, 3589, 2844, 2976, 3532, 1656, 51, 1296, 794, 2410, 4001, 2202, 1500, 982, 101, 1200, 3109, 2462, 2027, 353, 2838, 781, 703, 547, 1214, 1945, 2181, 3657, 2323, 1667, 1476, 1978, 1132, 1835, 1294, 754, 3333, 2776, 1229, 909, 1689, 2677, 1372, 1178, 277, 1335, 76, 3138, 3409, 543, 2045, 3013, 2562, 3375, 477, 1369, 1176, 3644, 2504, 696, 1096, 3729, 352, 443, 1103, 3692, 3363, 2311, 1400, 2732, 900, 3758, 887, 1789, 2255, 3812, 2872, 3426, 2177, 3257, 3956, 3795, 2565, 3441, 907, 3428, 473, 299, 210, 1159, 1668, 140, 378, 3386, 764, 627, 626, 3707, 1231, 3060, 192, 1718, 397, 758, 1862, 1270, 2975, 1151, 436, 3412, 2537, 848, 1308, 2989, 2710, 3715, 1918, 329, 3049, 1124, 675, 3586, 326, 1779, 1106, 2934, 2642, 2646, 2423, 1094, 1282, 2231, 1016, 1030, 2209, 1125, 1211, 2707, 1276, 1581, 3678, 78, 1977, 3332, 349, 2533, 10, 328, 1488, 2271, 695, 319, 162, 414, 1998, 3495, 2241, 3393, 2237, 3631, 1599, 1069, 2384, 1326, 3077, 1513, 3352, 3878, 182, 1367, 3142, 3423, 3530, 3114, 2220, 3905, 2123, 1525, 1657, 2738, 949, 1237, 3620, 972, 2496, 1195, 1700, 1961, 2755, 1187, 174, 721, 3788, 2347, 523, 441, 2489, 1809, 1751, 282, 3339, 1508, 2950, 759, 1645, 2788, 2575, 1696, 2914, 376, 2459, 802, 2595, 3682, 3234, 1381, 3841, 2133, 1532, 3292, 317, 94, 3275, 2081, 1801, 68, 974, 1032, 842, 3263, 427, 1570, 2982, 3888, 2983, 1546, 2286, 2400, 2700, 1318, 347, 977, 763, 956, 2359, 1987, 296, 134, 509, 3900, 941, 2288, 3279, 3391, 3470, 86, 2010, 2663, 2125, 3072, 1941, 1181, 3711, 1797, 1831, 2625, 2328, 2866, 2256, 1819, 673, 361, 3003, 3404, 147, 152, 1150, 3253, 1776, 2887, 961, 2444, 3796, 3823, 681, 1333, 3290, 931, 1129, 3417, 302, 362, 1542, 1458, 3581, 3955, 2895, 344, 384, 2122, 2272, 1944, 2252, 2962, 3492, 1212, 3287, 3125, 939, 3519, 2606, 2233, 2149, 2325, 2204, 4017, 3437, 3928, 2226, 2825, 3547, 3494, 3543, 863, 762, 3681, 276, 3251, 3882, 3934, 3637, 3020, 884, 3970, 2877, 1923, 3597, 2832, 3907, 356, 3284, 2764, 1567, 3906, 3877, 1935, 2638, 2884, 3010, 29, 814, 2601, 3776, 1582, 2148, 3028, 3542, 597, 3966, 3345, 1833, 806, 1408, 1613, 2169, 2317, 1925, 3204, 2007, 809, 713, 607, 1250, 38, 2932, 855, 1541, 1648, 126, 2878, 1455, 1621, 874, 1196, 114, 2679, 1003, 1496, 3008, 204, 1736, 1846, 3280, 620, 3334, 3098, 1182, 3592, 1762, 1876, 3727, 1933, 1453, 1399, 1239, 1412, 403, 123, 1263, 1783, 3294, 2684, 3963, 2475, 1866, 1322, 2845, 3321, 1353, 3348, 3063, 2578, 3960, 3909, 3680, 2355, 3439, 2823, 2563, 748, 2387, 2187, 2736, 1317, 1290, 952, 291, 3157, 507, 631, 1726, 865, 480, 1443, 309, 1800, 2908, 1378, 3863, 1606, 2632, 3552, 2760]
            keep_index = [3512,  751, 2832, 3069, 2366, 1737, 1738, 3510, 3513, 2945, 3102, 3033,
        3474, 2746, 2843, 3348, 2541, 2563, 1882, 2193, 2526, 2551, 2296, 2215,
        2902, 3288, 2962, 2229, 2596, 2839, 3024, 3055, 2590, 3196, 2779, 3614,
        2282, 3922, 2349, 2476, 2511, 3338, 2531, 3067, 3149, 2566, 2508, 2247,
        2737, 2772, 2653, 2655, 2442, 2227, 3682, 2942, 2288, 2650, 3303, 2904,
        2905, 3523, 2636, 2287, 3287, 3428, 2664, 2484, 3940, 2321, 2186, 2510,
        2428, 3629, 2245, 3532, 2751, 2948, 3500, 3534, 4011, 3011, 2314, 2580,
        2647, 3617, 2535, 2466, 2880, 2872, 4010, 2184, 2892, 3950, 2351, 3465,
        2196, 2462, 3030, 2929, 3343, 3101, 3660, 2355, 2402, 3389, 2921, 2922,
        2396, 3248, 3206, 2640, 2754, 3041, 2506, 3051, 2974, 2172, 2733, 3084,
        3118, 2330, 3478, 2175, 3090, 2882, 2358, 2276, 3507, 2261, 2218, 3226,
        2450, 3480, 2579, 2825, 2718, 2663, 2217, 3645, 3054, 3129, 3105, 3921,
        2574, 3909, 2174, 3992, 3123, 2767, 2339, 2891, 3973, 2226, 2550, 2141,
        2348, 2233, 2393, 2556, 3047, 2416, 2340, 3988, 3398, 3299, 2720, 3522,
        3608, 3315, 3505, 2464, 3257, 2521, 2752, 2483, 3526, 3609, 2159, 2957,
        3991, 3136, 3961, 4017, 2332, 3960, 3906, 2317, 3263, 2606, 3435, 2797,
        2582, 2863, 3281, 2403, 3093, 3543, 2912, 3691, 3078, 3583, 2254, 2559,
        2641, 3256, 3152, 3354, 3955, 2760, 2583, 3669, 2143, 4004, 2398, 3119,
        3207, 2722, 3519, 2585, 2937, 2383, 3993, 2303, 3625, 2205, 2624, 2460,
        2798, 3036, 1619, 2372, 2959, 3153, 2782, 3015, 3222, 3048, 2481, 2249,
        3631, 3016, 3680, 3392, 2538, 2920, 3125, 3533, 3062, 2557, 2775, 3128,
        2648, 3283, 3997, 2838, 3597, 3795, 3918, 3031, 2861, 3249, 2485, 3598,
        3862, 2747, 2699, 2701, 2595, 2758, 3173, 3610, 2425, 3951, 2759, 3284,
        3864, 2262, 2575, 3439, 2140, 2980, 2587, 3212, 2313, 2324, 2519, 2345,
        2499, 3224, 3275, 3628, 3612, 2584, 3927, 3567, 2420, 3126, 3127, 3063,
        2621, 2278, 2644, 2645, 2323, 2971, 3547, 3168, 3183, 2977, 3630, 2578,
        3984, 2829, 4027, 3100, 2824, 3987,  749, 3885, 2704, 2465, 3643, 2438,
        3426, 2431, 2371, 2509, 3640, 3383,  750, 3970, 3908, 2576, 3477, 2290,
        3075, 3009, 3554, 2177, 3442, 2427, 2424, 2451, 3366, 3652, 2709, 2571,
        2717, 3345, 3641, 2643, 3234, 3373, 3994, 2943, 2198, 2206, 2467, 2753,
        2470, 3134, 2528, 3542,  675, 2770, 2263, 2246, 3511, 2515, 3131, 3560,
        2577, 3563, 2698, 2757, 2562, 2316, 3958, 2283, 2811, 3350, 3549, 2877,
        2823, 3642, 3441, 2421, 3364, 3647, 2764, 3967, 2346, 3174, 2952, 2966,
        2204, 3574, 3520, 2914, 2736, 3535, 3569, 2802, 3113, 2946, 2207, 2295,
        3220, 3546, 2705, 2228, 2326, 2743, 3221, 3164, 2724, 2762, 2266, 3268,
        2211, 2382, 2195, 3482, 2482, 2608, 2498, 3558, 3091, 3115, 2533, 2437,
        2572, 3599, 2813, 2548, 2397, 3073, 2309, 2581, 2315, 2520, 2452, 2547,
        2162, 3390, 2310, 3577, 1872, 3648, 2622, 3166, 2536, 2522, 2167, 2620,
        2318, 2978, 2299, 3072, 2833, 3557, 3076, 2179, 2665, 2725, 2625, 3897,
        2766, 2430, 2656, 2599, 2806, 3405, 2232, 2554, 2623, 2208, 2264, 2405,
        2558, 3172, 2385, 3667, 2742, 3985, 3450, 2884, 3509, 2597, 3570, 2545,
        3662, 2610, 3611, 2169, 1137, 1138, 2676, 2395, 3579, 2721, 3147, 2507,
        2604, 2933, 2390, 3391, 2267, 2903, 2289, 2389, 2862, 2479, 3000, 3124,
        2842, 2350, 3436, 2312, 2294, 3463, 3499, 2517, 2951, 2171, 2926, 3306,
        2543, 2678, 2910, 2687, 3387, 3247, 3995, 3972, 2609, 3130, 2967, 3116,
        3032, 2336, 3580, 3670, 2567, 3388, 3524, 3930, 2285, 1744, 1755, 2453,
        3525, 3139, 2542, 2284, 3607, 3409, 2893, 2178, 3071, 2816, 2386, 3540,
        3188, 2469, 3447, 2565, 2706, 3881, 2685, 2873, 2769, 3045, 2680, 2364,
        3259, 2352, 2325, 2448, 3438, 3489, 2697, 2763, 2553, 2248, 2795, 3548,
        2690, 3140, 2924, 3639, 3527, 3552, 3564, 2682, 3497, 2814, 3472, 2449,
        2146, 3536, 3295, 2404, 3461, 2145, 2540, 2497, 3956, 2319, 3946, 2857,
        3403, 4021, 1523, 3879, 1843, 2260, 2072,  714, 1844, 3782, 3189, 1936,
        2189, 2190, 2683, 2108, 2109,  752,  793, 2684, 1895, 1968, 3693, 3696,
        1808, 1136, 1702, 2070, 1172, 3515, 1719, 1720,  508,  509, 1114, 2110,
        2369, 3176, 2047, 2050, 2075, 2137, 3727, 1834, 3699, 3694, 3701, 3706,
        3456,  781,  783, 2881, 2898, 1966, 1899, 1746, 2088, 1148, 1391, 3697,
        1921, 1922,  893,  387, 3774, 3850, 3843, 1954, 3689, 3375, 1145, 1247,
        1251, 3360, 3374, 3704, 3695, 1300, 1301, 3709, 2121, 2130, 1320, 3708,
        1057,  796, 3829, 3854, 2628, 3705,  867,  868,  739, 3714,  844, 3713,
        3768, 3758, 2749, 1513, 1524, 3853,  629,  640, 3861, 3788, 3841, 3133,
        2362,  753,  836, 3761, 1973, 2250,  807, 3784, 2235, 3760, 3859, 1901,
        2670, 3757, 3804, 3807,  588,  617, 1953, 3847, 3751, 1533, 3716, 3763,
        1832,  804, 2433, 3731, 3001, 3799, 3778, 3722, 3798, 3754, 3785, 1668,
        1705, 3775, 3848, 3816, 3803,  641,  644, 3711, 3820, 3748, 3724, 2991,
        3092, 3817, 3838, 3710, 2244, 2513, 3703, 3819, 1547, 1562, 3834, 2693,
        3308, 2994, 3745, 3835, 3801, 3310, 3809, 3286, 1833, 2614, 3732, 3773,
        2107, 3741, 3812, 3352, 3738, 3811, 3730, 1688, 3792, 3587, 3755, 2897,
        3690, 3805, 1124, 1198, 3726, 2651, 3688, 3765, 1634,  106, 3683, 3685,
        3845, 3218, 3675, 3840, 3702, 3736, 2514, 3700,  700, 1605, 2870, 3681,
        3780, 3521, 3929, 3823, 3728,  969, 2947, 3808, 1056, 1058, 3528, 3742,
        3790, 3767, 3822, 3776, 3719, 1132, 1139, 3849, 1792, 3720, 3739, 3770,
        1997, 3712, 1031, 1125, 3789, 2200, 3802, 3772, 3842, 3786, 3806,  722,
         723, 2329,  884, 3750, 3744, 3110, 3359, 3516, 2837, 2097, 3684, 3698,
        3833, 3814, 3825, 3813, 3818, 3747, 3791, 3783, 1848, 1941, 3787, 3759,
        3686, 3856, 3836, 3471, 1559, 3692, 3753, 3846, 3674, 3797, 3766,  780,
        3725, 3469, 1695, 2092, 2255, 3855, 3687, 3734, 3844, 2251, 3762,  682,
        3779, 3289, 2735, 3764, 3717, 3565, 1641, 1267, 1907, 3800, 1183, 1476,
        2928, 3831, 3718, 3810, 2120, 2713,  598, 3707, 3644, 3646, 1846, 1465,
        1887, 1891, 3743, 2104,   40, 1851, 3746, 3752, 3858, 2082, 3737, 3402,
        2039, 2038, 3721, 2026, 1384, 3349, 2981, 3715, 2492, 1113, 1639, 3749,
        2304, 3826, 1959, 2090, 3857, 3095,  361, 3821, 3860, 1220, 2360, 1365,
        1429, 2037, 2748, 2773, 3777, 3796, 3769,  795, 1905, 2085, 1219, 1991,
        2480, 2875,  985, 3837, 3852, 3756, 1669, 3830,  742, 3832,  869, 3827,
         611, 3231, 1146, 1378]
        
        #     keep_index = [1126,  165, 2126, 1545,  513, 1929, 2546, 3167, 2866, 1534, 2231, 1638,
        # 2781, 2523,  187,  971, 3163, 2185, 1889,  841,  300, 3061, 1367,    8,
        # 1689, 3615, 3304, 3228, 1554,  108, 1279, 1133, 1356, 2975, 3883, 3382,
        # 1531, 3904, 2051, 2272, 2281,  497, 3014,  154, 2188, 3976, 1052, 1752,
        # 1822,  336,   65, 2414, 3060,  665, 2440, 1716, 1767, 2788, 2836, 1807,
        # 3171,   96,  112, 3089,  137, 2516,  965, 1095, 3012,  853, 1512, 3454,
        # 2344, 1577, 1962,   88, 1086,  672,  406, 1165, 2500, 2631,  262, 3443,
        # 3635,  704, 1666, 1603, 2727,  632, 3097, 2885, 2406, 3250, 1181,  210,
        # 2062, 3313, 2617,  891,  441, 3907,  979, 1061, 1217,  771, 1277, 3939,
        # 3493,  385, 1573,  190, 3429, 1422,  600, 1804, 3872, 3934, 1414, 1274,
        #  367, 2512, 1291, 1500,  185, 2113,  541, 3237, 2019,  861, 3602, 1436,
        #    2,  468, 2755, 1796,  334, 3175, 2041,  582, 3394, 2686, 2168, 3633,
        # 3227, 2165,  479, 1488, 3566, 1540, 3182,   60,  355, 1788, 2242,  476,
        # 1505,  528,  746, 1077, 1818, 4020, 1282,  657, 2429, 1331, 3890,  819,
        # 3919, 3156,  312, 3550, 2197, 3291, 1820,  702,  831, 2153, 3677, 1992,
        #  253,  993,  554, 3056, 2059, 2095, 2114,  544, 3254, 3490, 1270,  170,
        # 1701,  183, 2365,   94,  961, 1450, 1654, 3942, 2347, 3999,  763, 1354,
        # 2998, 1231,  258, 1014, 1712, 3205, 2740, 1022, 3336, 3484,  444, 1287,
        # 2808,  133, 1698, 1156, 2598, 1303,  445,   62,  820,  656, 2918, 3255,
        # 3915,  398,  369,  540, 1424, 3065, 1028, 3551,  337, 2658, 2212,  563,
        #  512, 1768,  167,  532, 1150, 2322,  792, 1916, 2408,  111,  536,  998,
        #  616,  789,  162, 3253, 2292, 2972, 3327,  693, 2817,  435,  188, 1810,
        # 2560, 3466,  353,  409, 2830, 2155, 1521, 1845, 3898,  397, 2696, 2570,
        # 1827, 1397,  754,  420, 2368, 1842, 3184, 1374,  327, 2058, 2031, 2820,
        # 3027, 2949, 2637, 1697, 2799,  847,  684, 2463,  814,  830, 2411, 1627,
        #  729,  806, 2569, 1890, 3210, 4009, 1739, 1747,  283, 2494,  764, 1700,
        #  954, 3239, 3240,  747, 1857, 2436, 3573,  826, 3233, 2265,  266, 2657,
        # 1070, 2995,  774,    1, 1556,  651,  953,  772, 1196, 2710,  548,  935,
        #  955,  901,  907, 1869, 1394, 3638, 1245, 1351, 1546, 1261, 1537,  222,
        # 3290,  689, 1068,   39, 1344,  386, 1849,  756,  908, 1036, 1175, 1184,
        # 2089,  942,  375, 3452,  139,  298, 3214, 1511,  254,  553, 3177, 1164,
        # 1451, 3591, 3238, 1242, 1443, 3408, 1177, 3968, 3969, 1405, 2524,  878,
        # 1839, 3475, 1897, 2815,  453, 3135,  778, 2273,  574,   85, 1918,  543,
        # 2695, 1662, 2279,  273, 2220,  477,  773,   69,  393, 1171,  277,  233,
        #  897, 2603, 1858,  573,  956, 3244,  404,  521, 2048,  545, 1379, 3003,
        #  481,  630, 2963, 4023,  383, 2078, 3021,  903, 3068,  197, 1383,  235,
        # 1927, 1480, 3880, 1062,  118, 2474, 1094, 3957,  535, 2067,  250, 3145,
        #  745,  360, 2182,  191,  209, 1179,  557, 4016, 2605,  648, 1254, 3616,
        # 1690,  822,  833, 2454,   81, 3108, 3148, 1748, 3446, 2666, 3887, 4022,
        # 3948,  943, 3666,    7,   41, 2151, 3044,  808, 3013,  230,  735,  203,
        # 2931,  627, 3195,   25,  748, 2144, 3292, 1682, 3865,   92,  148,  776,
        # 2486,  658, 2854,  344, 1717,  202,  565, 1568, 1246, 3365, 1065,  302,
        # 1470, 3270,  180,  341,  121, 1178, 3621,  178, 1444, 3575, 2987, 1868,
        # 2394, 1227, 3886,   71,  391, 2993,  297, 1490,  455, 1437,  159, 3604,
        # 1514,  271, 1628, 3494,  728, 1453, 1703, 1118,   47, 3996,  403, 2668,
        # 3655,  163, 1358,   84, 3035, 2214, 3470, 2593,  152, 3229, 3459, 3319,
        # 1366, 1715, 2822, 1934,  472,  875,  782,  429, 3559,  713, 3393, 3399,
        # 2669,  882,  102, 3417, 2632, 2487, 1598, 1357,  372,   53, 3952, 2539,
        # 1046,  797, 1754, 2157,  249, 2761, 1428, 2458,  143,  417, 1082,  400,
        # 2363, 1567, 3605, 1606,  688, 2065, 2846, 2777, 2986, 1613,  333, 1596,
        # 2711,  311, 4028, 1257, 2700, 2739,  322, 2502, 3155, 1644, 2612, 1775,
        #  580, 2652, 1951, 1837, 2901, 3514,  454,   73, 3042,  184,  371, 1906,
        #  560, 3320, 3264,  482, 3901, 2999, 2732, 1859,  189, 2150,  691, 1170,
        # 1236, 3406,  770, 2976, 2983, 2434,  768, 3936, 3479,  650,  987, 2374,
        # 2030,  207, 2035, 2860,  358,  708,  895,  296, 1099, 1144,  556,  320,
        # 3121,  673, 1090, 1586, 2381, 1798, 3863, 1967,  405,   31, 1615, 2016,
        # 2237,  229, 1915, 3083,  199, 3488,  305, 3963, 3679, 2142,  103,  274,
        # 2618, 3386,  539, 2960, 1041, 2871, 2327, 1314, 1343, 3974,  666, 3328,
        # 3017, 3316, 2156, 2992, 2210,  310, 3274, 1520, 3029,  515, 3318, 3496,
        # 1239, 3401, 1828,  960,  129,  114, 1335, 3464,   14, 1649, 2688, 3576,
        # 2073, 1585, 1794, 3358, 3151,  176,  606, 1595,   57,   12, 1565,  726,
        #  287, 1676, 3935,  146, 2501,    4,  328, 2036,  332, 1864, 3335,  687,
        # 1098, 2122,  396, 2459,    9, 3411,  218,  394, 2056, 1406,  473,  720,
        # 1106, 2868, 3159,  707, 1375, 1880,  566,  463, 2269, 2415, 3280, 3043,
        # 1902, 2170,  488,  634,  318,  153, 1382,  422, 2101,  848,  319,  315,
        #  465, 2401,  117,  339, 2080, 1583, 2712,  564, 2328, 2787, 3501, 2223,
        #  323,  547,   80, 3034, 2302, 3209, 2835, 1815, 1677, 3219, 1989,  419,
        # 1948,  329, 1060,  570,  451, 1824, 3538, 1671,  449, 1339,  621, 3120,
        #  259, 1398,  443,  800,   15,  790,  843, 2627, 1632,  883, 1510,  542,
        # 1678, 1516, 1802, 3627, 3491, 2826, 3910,  308, 1007,  423, 3203, 3545,
        # 3487, 1208,  252, 1042, 1312,  715, 1040,  196,  145,  156,  380, 2681,
        # 2478, 2821, 1193, 2166,  583, 3518,  213,  125,  278, 2564,  416, 1560,
        # 3301,  424, 1685,  160, 1141,  579,  411,  181,  925, 1204, 1589, 2102,
        # 2446,  741, 1408,   19, 2343, 2271, 3279, 3112,  499, 2379,  158, 2923,
        #  577,  219, 1337, 1912,  431,  572, 2874, 1322, 1659, 3419, 1416,  255,
        # 1074, 3979,  407, 2116,  510, 1324,  226,  414, 2475, 2367, 1160,  390,
        # 2477,  490,  151, 1572, 1866,  593,   66, 2439, 1990,  507, 3006,  530,
        #  555, 1002, 2028, 1458,  208,  546,  134, 3498,  523, 3485,  439, 1495,
        # 3199,  100,  247,  270, 2818,  524, 2852, 3899,  340, 1646, 1498, 2384,
        #  489, 1614,  351, 2890,  220, 1972, 4024, 3317,  110,   42, 1686,   75,
        #  215, 1942,  123, 3998, 2845, 3481, 1129,   63,  660, 3010, 1016, 2216,
        # 2356,  428, 1047,  493,  592,  389, 2537, 3433,  177, 2789, 2613, 3396,
        # 3019,  500,  357, 3144,  309,  595,  228,  430,  292, 1536,  654, 3590,
        # 1960,  412,  201,  345]


            X = X[keep_index]
            y = y[keep_index]
            
            # pop the second column out
            # y = y[:, [0,2,3,4,5,6]]

            # sort
            # y[:, 1] -= 0.06
            # scores = y
            # # # max_score = np.argmax(scores, axis=1)
            # top2_gap0 = [max(s) - np.sort(s)[-2] for s in scores]
            # sort_indices = np.argsort(top2_gap0)[:2000]
            # y = y[sort_indices]
            # X = X[sort_indices]
            # is_shuffle = False

            # y *= 10
        elif name == 'wild_arena_selected':
            with np.load(custom['X_path'], allow_pickle=True) as data:
                X = data['selected_vectors']
                y = data['selected_scores']

            X = (X - np.mean(X, axis=1, keepdims=True)) / (np.std(X, axis=1, keepdims=True) + 1e-8)
            print(X.shape, y.shape)
            # price = [5, 10, 20, 5, 3, 2, 1.8]  # gold policy
            # y /= price
            # y[:, 1] -= 0.05
            # y *= 10


        else:
            raise RuntimeError('Dataset does not exist')
        # Shuffle data
        if is_shuffle:
            self.X, self.y = shuffle(X, y, random_state=seed)
            # self.y[:200,1:] *= 0
        #     self.y[:400,2:] *= 0
        #     self.y[:600, 3:] *= 0
        #     self.y[:800, 4:] *= 0
        #     self.y[:1000, 5:] *= 0
        #     self.y[:1200, 6:] *= 0
        else:
            self.X, self.y = X, y
        # generate one_hot coding:
        if custom:
            self.y_arm = np.argmax(self.y, axis=1).reshape((-1, 1))
            self.y_rwd = self.y
        else:
            self.y_arm = OrdinalEncoder(
                dtype=np.int32).fit_transform(self.y.to_numpy().reshape((-1, 1)))
        # cursor and other variables
        self.cursor = 0
        self.size = self.y.shape[0]
        self.n_arm = np.max(self.y_arm) + 1
        self.dim = self.X.shape[1] * self.n_arm
        self.act_dim = self.X.shape[1]

    def step(self, float_reward=False):
        assert self.cursor < self.size
        X = np.zeros((self.n_arm, self.dim))
        for a in range(self.n_arm):
            X[a, a * self.act_dim:a * self.act_dim +
                self.act_dim] = self.X[self.cursor]
        arm = self.y_arm[self.cursor][0]
        if float_reward:
            rwd = self.y_rwd[self.cursor]
        else:
            rwd = np.zeros((self.n_arm,))
            rwd[arm] = 1
        self.cursor += 1
        return X, rwd

    def finish(self):
        return self.cursor == self.size

    def reset(self):
        self.cursor = 0


if __name__ == '__main__':
    b = Bandit_multi('mushroom')
    x_y, a = b.step()
    # print(x_y[0])
    # print(x_y[1])
    # print(np.linalg.norm(x_y[0]))
